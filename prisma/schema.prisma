generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

model BaseModel {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  @@map("base_model")
  @@ignore
}

model User {
  id               String          @id @default(uuid())
  displayUsername  String?
  email            String          @unique
  role             Role            @default(USER)
  firstName        String?
  image            String?
  bio              String?
  twoFactorEnabled Boolean         @default(false)
  name             String?
  isEmailVerified  Boolean         @default(false)
  createdAt        DateTime        @default(now())
  deletedAt        DateTime?       @db.Timestamptz(6)
  updatedAt        DateTime        @updatedAt
  username         String?
  lastName         String?
  accounts         Account[]
  passkeys         PassKey[]
  sessions         Session[]
  tikTokShopAuth   TikTokShopAuth?
  twoFactorAuths   TwoFactorAuth[] @relation("UserTwoFactorAuths")

  @@map("user")
}

model Account {
  id                    String    @id @default(uuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  deletedAt             DateTime? @db.Timestamptz(6)
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id        String    @id @default(uuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  deletedAt DateTime? @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model TwoFactorAuth {
  id          String    @id @default(uuid())
  userId      String
  secret      String?
  backupCodes String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime? @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt
  user        User      @relation("UserTwoFactorAuths", fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_auth")
}

model PassKey {
  id           String    @id @default(uuid())
  name         String?
  userId       String
  publicKey    String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String
  createdAt    DateTime  @default(now())
  deletedAt    DateTime? @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("pass_key")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  deletedAt  DateTime? @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt

  @@map("verification")
}

model TikTokShopAuth {
  id                    String    @id @default(uuid())
  userId                String    @unique
  shopId                String    @unique
  shopName              String?
  accessToken           String
  refreshToken          String
  accessTokenExpiresAt  DateTime
  refreshTokenExpiresAt DateTime
  scope                 String[]
  region                String?
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime? @db.Timestamptz(6)
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tiktok_shop_auth")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
